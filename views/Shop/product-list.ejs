<section class="flex flex-col lg:flex-row gap-6 pt-12 px-4 lg:px-0">
  <!-- Sidebar Filters -->
  <aside class="w-full lg:w-1/4 bg-gray-800 rounded-lg shadow-lg border-white p-4 lg:sticky lg:top-6">
    <h3 class="text-white text-2xl mb-6 font-semibold border-b-2 border-gray-600 pb-3">Filters</h3>
    <form id="filter-form">
      <!-- Filter: Gender -->
      <div class="mb-6">
        <h4 class="text-white mb-2 text-lg font-medium uppercase dark:text-white">Gender</h4>
        <div class="flex flex-col gap-2 ">
          <% ['MEN', 'WOMEN' , 'KIDS' ].forEach((option)=> { %>
            <label class="ml-2 text-sm font-medium text-white dark:text-gray-300">
              <input type="checkbox"
                class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-primary-600 focus:ring-2 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-primary-600"
                name="gender" value="<%= option %>" <%=gender && gender.includes(option) ? 'checked' : '' %>
              />
              <%= option.charAt(0) + option.slice(1).toLowerCase() %>
            </label>
            <% }) %>
        </div>
      </div>

      <!-- Filter: Size -->
      <div class="mb-6">
        <h4 class="text-white mb-2 text-lg font-medium uppercase dark:text-white">Size</h4>
        <div class="flex flex-col gap-2">
          <% [40, 41, 42, 43, 44, 45].forEach((sizeOption)=> { %>
            <label class="ml-2 text-sm font-medium text-white dark:text-gray-300">
              <input type="checkbox"
                class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-primary-600 focus:ring-2 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-primary-600"
                name="size" value="<%= sizeOption %>" <%=size && size.includes(sizeOption.toString()) ? 'checked' : ''
                %>
              />
              <%= sizeOption %>
            </label>
            <% }) %>
        </div>
      </div>

      <!-- Filter: Category -->
      <div class="mb-6">
        <h4 class="text-white mb-2 text-lg font-medium uppercase dark:text-white">Category</h4>
        <div class="flex flex-col gap-2">
          <% ['Running', 'Basketball' , 'Lifestyle' , 'Soccer' ].forEach((categoryOption)=> { %>
            <label class="ml-2 text-sm font-medium text-white dark:text-gray-300">
              <input type="checkbox"
                class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-primary-600 focus:ring-2 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-primary-600"
                name="category" value="<%= categoryOption %>" <%=category &&
                category.includes(categoryOption.toString()) ? 'checked' : '' %>
              />
              <%= categoryOption %>
            </label>
            <% }) %>
        </div>
      </div>

      <!-- Filter: Price -->
      <div class="mb-6">
        <h4 class="text-white mb-2 text-lg font-medium uppercase dark:text-white">Price</h4>
        <div class="flex flex-col gap-2">
          <% [ { label: 'Under $100' , value: 'under100' }, { label: '$100 - $200' , value: '100to200' }, {
            label: '$200 - $300' , value: '200to300' }, { label: 'Over $300' , value: 'over300' },
            ].forEach((priceOption)=> { %>
            <label class="ml-2 text-sm font-medium text-white dark:text-gray-300">
              <input type="checkbox"
                class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-primary-600 focus:ring-2 focus:ring-primary-500 dark:border-gray-600 dark:bg-gray-700 dark:ring-offset-gray-800 dark:focus:ring-primary-600"
                name="price" value="<%= priceOption.value %>" <%=price && price.includes(priceOption.value) ? 'checked'
                : '' %>
              />
              <%= priceOption.label %>
            </label>
            <% }) %>
        </div>
      </div>
    </form>
  </aside>

  <!-- Main Content -->
  <main class="w-full lg:w-3/4 flex flex-col gap-12">
    <!-- Search Bar -->
    <div class="flex justify-center mb-12">
      <form id="search-form" class="w-1/2 flex border rounded-lg overflow-hidden shadow-md">
        <input type="text" name="searchQuery" value="<%= searchQuery %>" placeholder="Search for products..."
          class="px-4 py-2 w-full border-none outline-none text-black" />
        <button type="submit"
          class="bg-orange-500 text-white px-4 py-2 rounded-r-lg transition-colors hover:bg-orange-600">
          Search
        </button>
      </form>
    </div>

    <!-- Product Categories -->
    <!-- <div class="flex gap-5 items-center justify-center px-4">
      <% [men, women, kid].forEach((img, index)=> { %>
        <img src="<%= img %>" alt="product-type-<%= index %>"
          class="product-type h-24 w-24 rounded-full border-4 border-gray-300 transition-transform transform hover:scale-110" />
        <% }) %>
    </div> -->

    <!-- Sort Dropdown -->
    <div class="relative flex items-center space-x-4">
      <button
        id="sortDropdownButton"
        data-dropdown-toggle="dropdownSort"
        type="button"
        class="flex items-center justify-center rounded-lg border border-gray-200 bg-white px-3 py-2 text-sm font-medium text-gray-900 hover:bg-gray-100 hover:text-primary-700 focus:z-10 focus:outline-none focus:ring-4 focus:ring-gray-100 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white dark:focus:ring-gray-700 sm:w-auto"
      >
        <svg
          class="-ms-0.5 me-2 h-4 w-4"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          fill="none"
          viewBox="0 0 24 24"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M7 4v16M7 4l3 3M7 4 4 7m9-3h6l-6 6h6m-6.5 10 3.5-7 3.5 7M14 18h4"
          />
        </svg>
        Sort
        <svg
          class="-me-0.5 ms-2 h-4 w-4"
          aria-hidden="true"
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          fill="none"
          viewBox="0 0 24 24"
        >
          <path
            stroke="currentColor"
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="m19 9-7 7-7-7"
          />
        </svg>
      </button>
    
      <!-- Dropdown -->
      <div
        id="dropdownSort"
        class="absolute left-0 top-full z-50 hidden w-40 divide-y divide-gray-100 rounded-lg bg-white shadow dark:bg-gray-700"
        data-popper-placement="bottom"
      >
        <ul
          class="p-2 text-left text-sm font-medium text-gray-500 dark:text-gray-400"
          aria-labelledby="sortDropdownButton"
        >
          <% const sortingOptions = [
            { label: 'Newest', value: 'newest' },
            { label: 'Increasing price', value: 'increasing_price' },
            { label: 'Decreasing price', value: 'decreasing_price' },
          ]; %>
          <% sortingOptions.forEach(option => { %>
            <li>
              <button
                data-value="<%= option.value %>"
                class="group inline-flex w-full items-center rounded-md px-3 py-2 text-sm text-gray-500 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-400 dark:hover:bg-gray-600 dark:hover:text-white sort-option"
              >
                <%= option.label %>
              </button>
            </li>
          <% }); %>
        </ul>
      </div>
    </div>
    

    <!-- Product List -->
    <section class="py-8 antialiased bg-gray-900 md:py-12">
      <div id="product-list" class="grid sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        <% if (filteredData.length===0) { %>
          <p class="text-center text-gray-500 col-span-full">No products found.</p>
          <% } else { %>
            <% filteredData.forEach((product)=> { %>
              <div
                class="flex flex-col p-5 bg-[#222933] rounded-lg shadow-lg hover:shadow-2xl transition-shadow transform hover:-translate-y-1">
                <div class="flex justify-center items-center h-64 w-full overflow-hidden rounded-lg mb-4">
                  <img src="<%= product.img[0] %>" alt="<%= product.name %>" class="h-full object-cover" />
                </div>
                <div class="flex flex-col flex-grow gap-2">
                  <h3 class="text-xl font-semibold text-white text-center">
                    <%= product.name %>
                  </h3>
                  <p class="text-sm text-gray-400 text-center">
                    <%= product.gender %>
                  </p>
                  <p class="text-lg font-bold text-orange-400 text-center">$<%= product.price %> USD</p>
                </div>
                <div class="mt-3">
                  <button onclick="window.location.href='/product-details/<%= product._id %>'"
                    class="w-full py-2 bg-orange-500 text-white font-medium rounded-lg transition-colors hover:bg-orange-600">
                    View Product
                  </button>
                </div>
              </div>
              <% }); %>
                <% } %>
      </div>
    </section>

    <section id="pagination" class="mt-6 flex items-center justify-center sm:mt-8">
      <ul class="flex items-center space-x-2 text-sm">
        <% if (currentPage> 1) { %>
          <!-- Previous Button -->
          <li>
            <button
              class="page-link flex items-center justify-center h-8 w-8 rounded-full bg-white border border-gray-300 text-gray-500 hover:bg-gray-100 hover:text-gray-700 transition dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
              data-page="<%= currentPage - 1 %>">
              <span class="sr-only">Previous</span>
              <svg class="h-4 w-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
              </svg>
            </button>
          </li>
        <% } %>

        <!-- Page Numbers -->
        <% for (let i=1; i <=totalPages; i++) { %>
          <li>
            <button
              class="page-link flex items-center justify-center h-8 w-8 rounded-full transition border <%= i === currentPage ? 'bg-blue-500 border-blue-500 cursor-not-allowed' : 'bg-white text-gray-500 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white' %>"
              data-page="<%= i %>" <%=i===currentPage ? 'disabled' : '' %>
              >
              <%= i %>
            </button>
          </li>
        <% } %>

        <% if (currentPage < totalPages) { %>
                  <!-- Next Button -->
                  <li>
                    <button
                      class="page-link flex items-center justify-center h-8 w-8 rounded-full bg-white border border-gray-300 text-gray-500 hover:bg-gray-100 hover:text-gray-700 transition dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                      data-page="<%= currentPage + 1 %>">
                      <span class="sr-only">Next</span>
                      <svg class="h-4 w-4 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                        fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                      </svg>
                    </button>
                  </li>
        <% } %>
      </ul>
    </section>

  </main>
</section>


<script>
  document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM is ready!");
    const filterForm = document.getElementById('filter-form');
    const searchForm = document.getElementById('search-form');
    const productList = document.getElementById('product-list');
    const pagination = document.getElementById('pagination');

    // Fetch products via AJAX
    async function fetchProducts(params, updateUrl = true) {
      try {
        const response = await fetch(`/shopping?${params}`, { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
        const data = await response.json();

        renderProducts(data.products);
        renderPagination(data.currentPage, data.totalPages);

        if (updateUrl) {
          updateBrowserUrl(params);
        }
      } catch (err) {
        console.error('Error fetching products:', err);
      }
    }

    // Update the browser URL
    function updateBrowserUrl(params) {
      const newUrl = `${window.location.origin}/shopping?${params}`;
      window.history.pushState(null, '', newUrl);
    }

    // Render products
    function renderProducts(products) {
      productList.innerHTML = products.length
        ? products
          .map(
            (product) => `
            <div class="flex flex-col p-5 bg-[#222933] rounded-lg shadow-lg hover:shadow-2xl transition-shadow transform hover:-translate-y-1">
                <div class="flex justify-center items-center h-64 w-full overflow-hidden rounded-lg mb-4">
                  <img 
                    src="${product.img[0]}" 
                    alt="${product.name}" 
                    class="h-full object-cover"
                  />
                </div>
                <div class="flex flex-col flex-grow gap-2">
                  <h3 class="text-xl font-semibold text-white text-center">${product.name}</h3>
                  <p class="text-sm text-gray-400 text-center">${product.gender}</p>
                  <p class="text-lg font-bold text-orange-400 text-center">$${product.price} USD</p>
                </div>
                <div class="mt-3">
                  <button 
                    onclick="window.location.href='/product-details/${product._id}'"
                    class="w-full py-2 bg-orange-500 text-white font-medium rounded-lg transition-colors hover:bg-orange-600"
                  >
                    View Product
                  </button>
                </div>
              </div>`
          )
          .join('')
        : '<p class="text-center text-gray-500 col-span-full">No products found.</p>';
    }

    // Render pagination
    function renderPagination(currentPage, totalPages) {
      const pagination = document.getElementById('pagination');
      pagination.innerHTML = `
        <ul class="flex items-center space-x-2 text-sm">
          ${currentPage > 1
          ? `
              <!-- Previous Button -->
              <li>
                <button 
                  class="page-link flex items-center justify-center h-8 w-8 rounded-full bg-white border border-gray-300 text-gray-500 hover:bg-gray-100 hover:text-gray-700 transition dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                  data-page="${currentPage - 1}"
                >
                  <span class="sr-only">Previous</span>
                  <svg class="h-4 w-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                  </svg>
                </button>
              </li>
              `
          : ''
        }
          ${Array.from({ length: totalPages }, (_, i) => i + 1)
          .map(
            (page) => `
                <li>
                  <button 
                    class="page-link flex items-center justify-center h-8 w-8 rounded-full transition border ${page === currentPage
                ? 'bg-primary-500 text-white border-primary-500 cursor-not-allowed'
                : 'bg-white text-gray-500 border-gray-300 hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white'
              }"
                    data-page="${page}"
                    ${page === currentPage ? 'disabled' : ''}
                  >
                    ${page}
                  </button>
                </li>
                `
          )
          .join('')
        }
          ${currentPage < totalPages
          ? `
              <!-- Next Button -->
              <li>
                <button 
                  class="page-link flex items-center justify-center h-8 w-8 rounded-full bg-white border border-gray-300 text-gray-500 hover:bg-gray-100 hover:text-gray-700 transition dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
                  data-page="${currentPage + 1}"
                >
                  <span class="sr-only">Next</span>
                  <svg class="h-4 w-4 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              </li>
              `
          : ''
        }
        </ul>
      `;
    }


    // Handle filter form submission
    filterForm.addEventListener('change', () => {
      const combinedParams = getCombinedParams();
      fetchProducts(combinedParams.toString());
    });

    // Handle search form submission
    searchForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const combinedParams = getCombinedParams();
      fetchProducts(combinedParams.toString());
    });

    const sortButton = document.getElementById("sortDropdownButton");
    const sortDropdownMenu = document.getElementById("dropdownSort");
    const sortOptions = document.querySelectorAll(".sort-option");
    let currentSortValue = "";
    //currentSortValue = urlParams.get("sort") || ""; 

    if (!sortButton || !sortDropdownMenu || !sortOptions) {
      console.error("Sort dropdown elements not found.");
    }

    // Toggle dropdown visibility
    sortButton.addEventListener("click", () => {
      sortDropdownMenu.classList.toggle("hidden");
    });

    // Event listener for selecting a sort option
    sortOptions.forEach((option) => {
      option.addEventListener("click", (event) => {
        currentSortValue = event.target.dataset.value;
        const combinedParams = getCombinedParams();
        fetchProducts(combinedParams.toString());
        sortDropdownMenu.classList.add("hidden"); // Close dropdown
      });
    });

    // Handle pagination click
    pagination.addEventListener('click', (e) => {
      if (e.target.classList.contains('page-link')) {
        const page = e.target.dataset.page;
        const combinedParams = getCombinedParams();
        combinedParams.set('page', page);
        fetchProducts(combinedParams.toString());
      }
    });

    function getCombinedParams() {
      const filterParams = new URLSearchParams(new FormData(filterForm));
      const searchParams = new URLSearchParams(new FormData(searchForm));

      // Combine both sets of parameters
      for (const [key, value] of searchParams.entries()) {
        filterParams.append(key, value);
      }

      // Include the current sort value
      if (currentSortValue) {
        filterParams.set("sort", currentSortValue);
      }

      return filterParams;
    }


    // Handle back/forward browser navigation
    window.addEventListener('popstate', () => {
      // Reload filters and pagination state from the current URL
      const params = window.location.search.substring(1);
      fetchProducts(params, false);
    });

    // Initial fetch
    //fetchProducts(window.location.search.substring(1));
  });

</script>