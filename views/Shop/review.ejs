<section
  class="ezy__epreview1 light bg-white text-zinc-900 relative overflow-hidden z-10"
>
  <div class="container px-4 mx-auto">
    <div class="flex justify-center max-w-4xl mx-auto">
      <div class="bg-blue-50 rounded p-4 m-4 lg:p-8 w-full">
        <div>
          <div class="flex justify-between items-center">
            <h2 class="text-2xl font-medium">Customer Review</h2>
            <div>
              <button data-modal-target="review-modal" data-modal-toggle="review-modal"
                class="text-blue-600 border border-blue-600 hover:text-white hover:bg-blue-600 rounded py-2 px-5 md:px-6"
              >
                New Comment
              </button>
            </div>
          </div>

          <div id="reviews-section">
            <!-- Reviews will be appended here -->
          </div>

        </div>
        <div class="py-6 lg:py-12 text-center">
          <button
            id="show-more-btn"
            class="hidden bg-blue-600 text-white text-sm hover:bg-opacity-90 rounded py-2.5 px-6 md:px-10"
          >
            Load More
          </button>
        </div>
      </div>
    </div>
  </div>
</section>


<!-- Add review modal -->
<div id="review-modal" tabindex="-1" aria-hidden="true" 
  class="fixed inset-0 z-50 hidden items-center justify-center bg-black bg-opacity-50">
  <div class="relative max-h-full w-full max-w-2xl p-4">
    <!-- Modal content -->
    <div class="relative rounded-lg bg-white shadow ">
      <!-- Modal header -->
      <div class="flex items-center justify-between rounded-t border-b border-gray-200 p-4 md:p-5">
        <div>
          <h3 class="mb-1 text-lg font-semibold text-gray-900">Add a review for:</h3>
          <a href="" class="font-medium text-blue-600 hover:underline">
            <%= product.name %> 
          </a>
        </div>
        <button type="button" class="absolute right-5 top-5 ms-auto inline-flex h-8 w-8 items-center justify-center rounded-lg bg-transparent text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900" data-modal-toggle="review-modal">
          <svg class="h-3 w-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
          </svg>
          <span class="sr-only">Close modal</span>
        </button>
      </div>
      <!-- Modal body -->
      <form id="review-form"  class="p-4 md:p-5">
        <!-- Hidden input for productID -->
        <input type="hidden" name="productId" value="<%= product.id %>">

        <div class="mb-4 grid grid-cols-2 gap-4">
          <!-- Star Rating Section -->
          <div class="col-span-2">
            <div class="flex items-center">
              <% for(let i = 1; i <= 5; i++) { %>
                <svg 
                  class="h-6 w-6 star hover:cursor-pointer <%= i <= 3 ? 'text-yellow-300' : 'text-gray-300' %>" 
                  data-value="<%= i %>" 
                  aria-hidden="true" 
                  xmlns="http://www.w3.org/2000/svg" 
                  fill="currentColor" 
                  viewBox="0 0 22 20">
                  <path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" />
                </svg>
              <% } %>
              <span id="rating-display" class="ms-2 text-lg font-bold text-gray-900">3.0 out of 5</span>
            </div>
          </div>

          <!-- Hidden input for rating -->
          <input type="hidden" id="rating" name="rating" value="3">

          <!-- Review Description Textarea -->
          <div class="col-span-2">
            <label for="description" class="mb-2 block text-sm font-medium text-gray-900">Review description</label>
            <textarea id="description" name="description" rows="6" class="mb-2 block w-full rounded-lg border border-gray-300 bg-gray-50 p-2.5 text-sm text-gray-900 focus:border-primary-500 focus:ring-primary-500" required></textarea>
          </div>

          <!-- Checkbox -->
          <div class="col-span-2">
            <div class="flex items-center">
              <input id="review-checkbox" type="checkbox" name="agree" value="yes" class="h-4 w-4 rounded border-gray-300 bg-gray-100 text-primary-600 focus:ring-2 focus:ring-primary-500" />
              <label for="review-checkbox" class="ms-2 text-sm font-medium text-gray-500 dark:text-gray-400">By publishing this review you agree with the <a href="#" class="text-blue-600 hover:underline">terms and conditions</a>.</label>
            </div>
          </div>
        </div>

        <!-- Submit & Cancel Buttons -->
        <div class="border-t border-gray-200 pt-4 md:pt-5">
          <button type="submit" class="me-2 inline-flex items-center rounded-lg bg-blue-700 px-5 py-2.5 text-center text-sm font-medium text-white hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300">
            Add review
          </button>
          <button type="button" data-modal-toggle="review-modal" class="me-2 rounded-lg border border-gray-200 bg-white px-5 py-2.5 text-sm font-medium text-gray-900 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:outline-none focus:ring-4 focus:ring-gray-100">
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>




<script>
  document.addEventListener('DOMContentLoaded', function () {
    const modalToggleButtons = document.querySelectorAll('[data-modal-toggle]');
    const modal = document.getElementById('review-modal');
    const form = document.getElementById('review-form');

    // Select all star elements
    const stars = document.querySelectorAll('.star');
    const ratingInput = document.getElementById('rating');
    const ratingDisplay = document.getElementById('rating-display');

    const productId = "<%= product.id %>";
    let page = 1;

    modalToggleButtons.forEach(button => {
      button.addEventListener('click', function () {
        if (modal.classList.contains('hidden')) {
          modal.classList.remove('hidden');
          modal.classList.add('flex');
        } else {
          modal.classList.add('hidden');
          modal.classList.remove('flex');
        }
      });
    });

    // Close modal when clicking outside the modal content
    window.addEventListener('click', function (event) {
      if (event.target === modal) {
        closeModal();
      }
    });

    // Close modal when pressing the 'Escape' key
    document.addEventListener('keydown', function (event) {
      if (event.key === 'Escape') {
        closeModal();
      }
    });

    // Close the modal
    function closeModal() {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
    };

    stars.forEach((star, index) => {
      star.addEventListener('click', () => {
        const ratingValue = index + 1; // Get the rating from star index
        ratingInput.value = ratingValue; // Update the hidden input value
        updateStarRating(ratingValue); // Update the star display
        ratingDisplay.textContent = `${ratingValue}.0 out of 5`; // Update the rating text
      });
    });

    function updateStarRating(rating) {
      stars.forEach((star, index) => {
        if (index < rating) {
          star.classList.remove('text-gray-300');
          star.classList.add('text-yellow-300');
        } else {
          star.classList.remove('text-yellow-300');
          star.classList.add('text-gray-300');
        }
      });
    }


    // Handle form submission with AJAX
    form.addEventListener('submit', function (event) {
      event.preventDefault(); // Prevent form from refreshing the page

      const formData = new FormData(form);
      //console.log('Form Data:', [...formData.entries()]);
      // Convert FormData to a plain object
      const formObject = Object.fromEntries(formData.entries());
      //console.log('Form Object:', formObject);

      // Send AJAX POST request using Fetch API
      fetch('/review/add', {
        method: 'POST',
        headers: {
          'X-Requested-With': 'XMLHttpRequest',
          'Accept': 'application/json',
          'Content-Type': 'application/json', // Critical for JSON parsing
        },
        body: JSON.stringify(formObject),   
      })
      .then((response) => {
        //console.log('Response status:', response.status);
        if (response.status === 401) {
          //console.log('User is not authenticated. Redirecting to login page...');
          window.location.href = '/auth/login'; // Redirect to login page
          return Promise.reject('Unauthorized'); // Explicit rejection
        } else if (!response.ok) {
          throw new Error('Something went wrong.');
        }
        return response.json();
      })
      .then(data => {
        if (data.success) {
          alert('Review submitted successfully!');
          form.reset(); // Clear the form
          closeModal(); // Close the modal
          location.reload(); // Reload the page to show the new review
        } else {
          alert('There was a problem submitting your review.');
        }
      })
      .catch(error => {
        if (error === 'Unauthorized') return; // Don't alert or log the error
        console.error('Error:', error);
        alert('An error occurred. Please try again.');
      });
    });

    async function fetchReviews() {
        try {
            const response = await fetch(`/review/fetch?productId=${productId}&page=${page}`);
            const data = await response.json();

            if (data.success) {
                const reviewsSection = document.getElementById('reviews-section');
                data.reviews.forEach(review => {
                  let starsHTML = '';
                  for (let i = 1; i <= 5; i++) {
                    starsHTML += `
                      <svg 
                        class="h-4 w-4 star ${i <= review.rating ? 'text-yellow-300' : 'text-gray-300'}" 
                        aria-hidden="true" 
                        xmlns="http://www.w3.org/2000/svg" 
                        fill="currentColor" 
                        viewBox="0 0 22 20">
                        <path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" />
                      </svg>
                    `;
                  }
                  const reviewHTML = `
                      <hr class=" my-5" />
                      <!-- item -->
                      <div>
                        <div class="flex items-center mb-6">
                          <div class="w-12 h-12 rounded-full mr-2 overflow-hidden">
                            <img
                              src="${review.avatar}"
                              alt=""
                              class="max-w-full h-auto mx-auto"
                            />
                          </div>
                          <div class="flex flex-grow justify-between">
                            <div>
                              <h5 class="font-medium mb-1"> ${review.username} </h5>
                              <p class="text-sm flex items-center">
                                ${starsHTML}
                                <span class="mx-1">${review.rating}</span>
                              </p>
                            </div>
                            <p class="text-sm opacity-50 mb-0">${review.createdAt}</p>
                          </div>
                        </div>
                        <p class="text-sm leading-normal opacity-75 mb-6">
                          ${review.description}
                        </p>
                        
                      </div>
                    `;
                    reviewsSection.insertAdjacentHTML('beforeend', reviewHTML);
                });

                if (data.hasMore) {
                    document.getElementById('show-more-btn').classList.remove('hidden');
                } else {
                    document.getElementById('show-more-btn').classList.add('hidden');
                }
                page++;
            } else {
                console.error(data.message);
            }
        } catch (error) {
            console.error('Error fetching reviews:', error);
        }
    }

    document.getElementById('show-more-btn').addEventListener('click', fetchReviews);

    // Load initial reviews
    fetchReviews();
  });
</script>

<!-- <div class="flex justify-end">
  <button
    class="hover:text-blue-600 hover:bg-gray-200 rounded inline-flex justify-center items-center duration-300 px-3 py-2 mr-6"
  >
    <i class="far fa-thumbs-up fs-6 mr-2"></i> Like (${review.likes})
  </button>
  <button
    class="hover:text-blue-600 hover:bg-gray-200 rounded inline-flex justify-center items-center duration-300 px-3 py-2"
  >
    <i class="far fa-thumbs-down fs-6 mr-2"></i> Dislike (${review.dislikes})
  </button>
</div> -->