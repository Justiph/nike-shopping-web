<section class="bg-white py-8 antialiased dark:bg-gray-900 md:py-16">
  <div class="mx-auto max-w-screen-xl px-4 2xl:px-0">
    <% if (!user) { %>
      <div class="min-h-screen flex flex-col items-center justify-center">
        <h1 class="text-2xl font-semibold text-gray-900 dark:text-white text-center">
          You need to log in to view your cart.
        </h1>
      </div>
    <% } else { %>
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white sm:text-2xl mb-6">Your Cart</h2>
      <div class="lg:flex lg:gap-8">
        <!-- Main Cart Section -->
        <div class="w-full lg:w-2/3 space-y-6">
          <% if (cart.products.length === 0) { %>
            <p class="text-lg text-gray-700 dark:text-gray-400">Your cart is empty.</p>
          <% } else { %>
            <% cart.products.forEach((item) => { %>
              <div class="product-item flex items-center justify-between rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800" 
                   data-product-id="<%= item.productId._id %>" 
                   data-size="<%= item.size %>">
                
                <!-- Thông tin sản phẩm -->
                <div class="flex-1">
                  <p class="text-base font-medium text-gray-900 dark:text-white"><%= item.productId.name %></p>
                  <p class="text-sm text-gray-500 dark:text-gray-400">Size: <%= item.size %></p>
                  <p class="product-price mt-2 text-base font-bold text-gray-900 dark:text-white">
                    $<%= (item.quantity * item.productId.price).toFixed(2) %>
                  </p>
                </div>

                <!-- Phần số lượng và nút chỉnh sửa -->
                <div class="flex items-center">
                  <!-- Nút giảm số lượng -->
                  <button class="update-cart-btn h-8 w-8 border border-gray-300 bg-gray-100 hover:bg-gray-200 dark:border-gray-600 dark:bg-gray-700 rounded"
                          data-product-id="<%= item.productId._id %>" 
                          data-size="<%= item.size %>" 
                          data-quantity="<%= item.quantity - 1 %>">
                    -
                  </button>
                  <!-- Hiển thị số lượng -->
                  <p class="product-quantity w-12 text-center text-gray-900 dark:text-white">
                    <%= item.quantity %>
                  </p>
                  <!-- Nút tăng số lượng -->
                  <button class="update-cart-btn h-8 w-8 border border-gray-300 bg-gray-100 hover:bg-gray-200 dark:border-gray-600 dark:bg-gray-700 rounded"
                          data-product-id="<%= item.productId._id %>" 
                          data-size="<%= item.size %>" 
                          data-quantity="<%= item.quantity + 1 %>">
                    +
                  </button>
                </div>

                <!-- Nút xóa sản phẩm -->
                <button class="remove-cart-btn ml-4 text-sm font-medium text-red-600 dark:text-red-500"
                        data-product-id="<%= item.productId._id %>" 
                        data-size="<%= item.size %>">
                  Remove
                </button>
              </div>
            <% }); %>
          <% } %>
        </div>

        <!-- Order Summary Section -->
        <% if (cart.products.length > 0) { %>
          <div class="w-full lg:w-1/3 mt-6 lg:mt-0 space-y-6">
            <div class="rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800">
              <p class="text-xl font-semibold text-gray-900 dark:text-white">Order Summary</p>
              <dl class="mt-4">
                <div class="flex justify-between">
                  <dt class="text-base text-gray-500 dark:text-gray-400">Original price</dt>
                  <dd class="text-base font-medium text-gray-900 dark:text-white">
                    $<span id="original-price">
                      <%= cart.products.reduce((total, item) => total + item.quantity * item.productId.price, 0).toFixed(2) %>
                    </span>
                  </dd>
                </div>
                <div class="flex justify-between border-t border-gray-200 dark:border-gray-700 pt-2">
                  <dt class="text-base font-bold text-gray-900 dark:text-white">Total</dt>
                  <dd class="text-base font-bold text-gray-900 dark:text-white">
                    $<span id="total-price">
                      <%= cart.products.reduce((total, item) => total + item.quantity * item.productId.price, 0).toFixed(2) %>
                    </span>
                  </dd>
                </div>
              </dl>
              <form method="GET" action="/cart/checkout" class="mt-4">
                <button class="w-full bg-green-500 text-white px-4 py-2 rounded-lg">Proceed to Checkout</button>
              </form>
              <div class="rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800">
                <form>
                  <label for="voucher" class="block text-sm font-medium text-gray-900 dark:text-white">Do you have a voucher or gift card?</label>
                  <input type="text" id="voucher" class="mt-2 block w-full rounded-md border-gray-300 bg-gray-50 p-2.5 dark:border-gray-600 dark:bg-gray-700 dark:text-white" placeholder="Enter code">
                  <button type="submit" class="w-full bg-blue-600 text-white px-4 py-2 mt-4 rounded-lg">Apply Code</button>
                </form>
              </div>
            </div>
          </div>
        <% } %>
      </div>
    <% } %>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Nút tăng/giảm số lượng
    document.querySelectorAll('.update-cart-btn').forEach((btn) => {
      btn.addEventListener('click', async (e) => {
        const productId = btn.getAttribute('data-product-id');
        const size = btn.getAttribute('data-size');
        const quantity = parseInt(btn.getAttribute('data-quantity'), 10);

        if (quantity === 0) {
        try {
          const response = await fetch('/cart/remove-ajax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, size }),
          });

          const data = await response.json();
          if (data.success) {
            updateCartUI(data.cart);
          }
        } catch (err) {
          console.error('Error removing item:', err);
        }
        return;
      }

        try {
          const response = await fetch('/cart/update-ajax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, size, quantity }),
          });

          const data = await response.json();
          if (data.success) {
            updateCartUI(data.cart); // Cập nhật giao diện
          }
        } catch (err) {
          console.error('Error updating cart:', err);
        }
      });
    });

    // Nút xóa sản phẩm
    document.querySelectorAll('.remove-cart-btn').forEach((btn) => {
      btn.addEventListener('click', async (e) => {
        const productId = btn.getAttribute('data-product-id');
        const size = btn.getAttribute('data-size');

        try {
          const response = await fetch('/cart/remove-ajax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, size }),
          });

          const data = await response.json();
          if (data.success) {
            updateCartUI(data.cart); // Cập nhật giao diện
          }
        } catch (err) {
          console.error('Error removing item:', err);
        }
      });
    });
  });

  // Hàm cập nhật lại giao diện giỏ hàng
  function updateCartUI(cart) {
  const cartContainer = document.querySelector('.w-full.lg\\:w-2\\/3'); // Phần danh sách sản phẩm
  const orderSummary = document.querySelector('.w-full.lg\\:w-1\\/3'); // Phần Order Summary
  const summaryOriginalPrice = document.querySelector('#original-price');
  const summaryTotalPrice = document.querySelector('#total-price');

  // Xóa nội dung sản phẩm cũ
  cartContainer.innerHTML = '';

  // Nếu giỏ hàng trống
  if (cart.products.length === 0) {
    // Hiển thị thông báo giỏ hàng trống
    cartContainer.innerHTML = '<p class="text-lg text-gray-700 dark:text-gray-400">Your cart is empty.</p>';

    // Xóa nội dung Order Summary
    if (orderSummary) {
      orderSummary.innerHTML = '';
    }

    return; // Dừng lại nếu giỏ hàng trống
  }

  // Render lại sản phẩm
  cart.products.forEach((item) => {
    const productHTML = `
      <div class="product-item flex items-center justify-between rounded-lg border border-gray-200 bg-white p-4 shadow-sm dark:border-gray-700 dark:bg-gray-800" 
           data-product-id="${item.productId._id}" 
           data-size="${item.size}">
        <div class="flex-1">
          <p class="text-base font-medium text-gray-900 dark:text-white">${item.productId.name}</p>
          <p class="text-sm text-gray-500 dark:text-gray-400">Size: ${item.size}</p>
          <p class="product-price mt-2 text-base font-bold text-gray-900 dark:text-white">
            $${(item.quantity * item.productId.price).toFixed(2)}
          </p>
        </div>
        <div class="flex items-center">
          <button class="update-cart-btn h-8 w-8 border border-gray-300 bg-gray-100 hover:bg-gray-200 dark:border-gray-600 dark:bg-gray-700 rounded"
                  data-product-id="${item.productId._id}" 
                  data-size="${item.size}" 
                  data-quantity="${item.quantity - 1}">
            -
          </button>
          <p class="product-quantity w-12 text-center text-gray-900 dark:text-white">${item.quantity}</p>
          <button class="update-cart-btn h-8 w-8 border border-gray-300 bg-gray-100 hover:bg-gray-200 dark:border-gray-600 dark:bg-gray-700 rounded"
                  data-product-id="${item.productId._id}" 
                  data-size="${item.size}" 
                  data-quantity="${item.quantity + 1}">
            +
          </button>
        </div>
        <button class="remove-cart-btn ml-4 text-sm font-medium text-red-600 dark:text-red-500"
                data-product-id="${item.productId._id}" 
                data-size="${item.size}">
          Remove
        </button>
      </div>
    `;
    cartContainer.insertAdjacentHTML('beforeend', productHTML);
  });

  // Tính toán và cập nhật giá
  const totalPrice = cart.products.reduce((total, item) => total + item.quantity * item.productId.price, 0).toFixed(2);
  summaryOriginalPrice.textContent = totalPrice;
  summaryTotalPrice.textContent = totalPrice;

  // Gắn lại sự kiện cho các nút
  bindEvents();
}


  // Hàm gắn lại sự kiện sau khi DOM được cập nhật
  function bindEvents() {
  // Xử lý nút tăng/giảm số lượng
  document.querySelectorAll('.update-cart-btn').forEach((btn) => {
    btn.addEventListener('click', async (e) => {
      const productId = btn.getAttribute('data-product-id');
      const size = btn.getAttribute('data-size');
      const quantity = parseInt(btn.getAttribute('data-quantity'), 10);

      // Nếu số lượng là 0, chuyển thành yêu cầu xóa sản phẩm
      if (quantity === 0) {
        try {
          const response = await fetch('/cart/remove-ajax', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, size }),
          });

          const data = await response.json();
          if (data.success) {
            updateCartUI(data.cart);
          }
        } catch (err) {
          console.error('Error removing item:', err);
        }
        return;
      }

      // Xử lý cập nhật số lượng
      try {
        const response = await fetch('/cart/update-ajax', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, size, quantity }),
        });

        const data = await response.json();
        if (data.success) {
          updateCartUI(data.cart);
        }
      } catch (err) {
        console.error('Error updating cart:', err);
      }
    });
  });

  // Xử lý nút xóa sản phẩm
  document.querySelectorAll('.remove-cart-btn').forEach((btn) => {
    btn.addEventListener('click', async (e) => {
      const productId = btn.getAttribute('data-product-id');
      const size = btn.getAttribute('data-size');

      try {
        const response = await fetch('/cart/remove-ajax', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ productId, size }),
        });

        const data = await response.json();
        if (data.success) {
          updateCartUI(data.cart);
        }
      } catch (err) {
        console.error('Error removing item:', err);
      }
    });
  });
}
</script>

